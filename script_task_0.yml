AWSTemplateFormatVersion: '2010-09-09'
Description: Create an EC2 instance by AWS CloudFormation
Parameters:
    ImageId:
      Type: String
      Default: ami-013a129d325529d4d
    AvailabilityZone:
      Type: String
      Default: us-west-2b
    VpcId:
      Type: String
      Default: vpc-010e9f192a9bb2655
    Capacity:
      Type: String
      Default: 2
    PauseTime:
      Type: String
      Default: PT1M
    SubnetId:
      Type: String
      Default: subnet-011b21a8898034b7c
    InstanceType:
      Type: String
      Default: t2.micro
      AllowedValues:
        - t2.micro
        - m1.small
        - m1.large
      Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.
    KeyName:
      Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
      Type: AWS::EC2::KeyPair::KeyName
      ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Enable HTTP access via user defined port
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80

  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template #!Sub '${AWS::StackName}-launch-template-for-auto-scaling'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref WebSecurityGroup
              - !Ref SSHSecurityGroup
            DeleteOnTermination: true
        Placement:
          Tenancy: dedicated
        ImageId: 
          !Ref ImageId
        InstanceType: 
          !Ref InstanceType
        KeyName: 
          !Ref KeyName
        UserData:
          'Fn::Base64': !Sub |
            #!/bin/bash -ex
            trap '/opt/aws/bin/cfn-signal --exit-code 1 --resource VirtualMachine --region ${AWS::Region} --stack ${AWS::StackName}' ERR
            # run some commands
            sudo amazon-linux-extras enable corretto8 & sudo yum clean metadata & sudo yum install -y java-1.8.0-amazon-corretto
            /opt/aws/bin/cfn-signal --exit-code 0 --resource VirtualMachine --region ${AWS::Region} --stack ${AWS::StackName}
            # run service 
            yum install ec2-net-utils -y
            ec2ifup eth1
            service httpd start

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - !Ref SubnetId
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: !Ref Capacity
      MaxSize: !Ref Capacity
      DesiredCapacity: !Ref Capacity
      HealthCheckGracePeriod: 300
      MaxInstanceLifetime: 2592000

Outputs:
  PublicIp:
    Description: Server Public IP
    Value: !Ref SSHSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-PublicIp"
